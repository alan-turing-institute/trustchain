[package]
name = "trustchain"
version = "0.1.0"
authors = ["Trustchain Devs"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "create"
path = "src/create.rs"

[[bin]]
name = "create_and_update"
path = "src/create_and_update.rs"

[[bin]]
name = "did_resolve"
path = "src/did_resolve.rs"

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.63"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

# https://crates.io/crates/did-ion
did-ion="0.1.0"
tokio = {version = "1.20.1", features = ["full"]}
futures = "0.3.21"

# ssi = { version = "0.4", path = "../", default-features = false, features = ["http-did", "secp256k1"] }
ssi = { version = "0.4", features = ["http-did", "secp256k1"] }
serde_json = "1.0"
canonical_json = "0.4.0"
# lazy_static="1.4.0"
# async-trait = "0.1"
# anyhow = {}
# failure = {}
# serde = { version = "1.0", features = ["derive"] }
# serde_jcs = "0.1"
# anyhow = "1.0"
# thiserror = "1.0"
# base64 = "0.13"
# sha2 = "0.10"
# json-patch = "0.2.6"
# reqwest = { version = "0.11", features = ["json"] }


[target.'cfg(target_os = "android")'.dependencies.reqwest]
version = "0.11"
features = ["json", "native-tls-vendored"]


[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
